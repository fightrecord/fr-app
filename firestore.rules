rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Deny Catch All
		match /{document=**} {
      allow read, write: if false;
    }

    // The user is allowed access
    function userHasAccess() {
      return exists(/databases/$(database)/documents/access/$(request.auth.uid));
    }

    // The user has the specified role
    function userHasRole(role) {
      return userHasAccess() && role in get(/databases/$(database)/documents/access/$(request.auth.uid)).data.roles;
    }

    // The user has the console role
    function isConsoleUser() {
      return request.auth.uid != null && userHasRole('console');
    }

    // Read access to user access
    match /access/{userId} {
      allow read: if request.auth.uid == userId;
      allow write: if false;
    }

    // Read/Write access to own user profile
    match /profiles/{profileId} {
      allow list: if request.auth.uid != null;
      allow create: if request.auth.uid in request.resource.data.owners
      allow get, update: if request.auth.uid in resource.data.owners
    }

    // Read access to gyms for signed in users
    match /gyms/{gymId} {
      allow read: if request.auth.uid != null;
    }

    // Read access to public channels for signed in users
    match /channels/{channelId} {
      allow read: if request.auth.uid != null

      match /messages/{messageId} {
        allow read: if request.auth.uid != null
        allow create: if request.auth.uid != null
      }
    }

    // Console read access
    match /dailyreports/{classId} {
      allow read: if isConsoleUser();
    }

    match /classes/{classId} {
      allow read: if isConsoleUser();
    }
    
    match /events/{eventId} {
      allow read: if isConsoleUser();
    }
    
    match /fighters/{fighterId} {
      allow read: if isConsoleUser();
    }
    
    match /teams/{teamId} {
      allow read: if isConsoleUser();
    }
    
    match /{anyPath=**}/bouts/{boutId} {
      allow read: if isConsoleUser();
    }
  }
}